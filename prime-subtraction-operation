import java.util.Arrays;

class Solution {  

    Boolean[] isprime = new Boolean[1000];

    // Method to perform the Sieve of Eratosthenes
    void sieve(Boolean[] isprime) {
        Arrays.fill(isprime, true);
        isprime[0] = false;
        isprime[1] = false;

        for (int i = 2; i * i < 1000; i++) {
            if (!isprime[i]) {
                continue;
            }
            for (int j = i * i; j < 1000; j += i) {
                isprime[j] = false;
            }
        }
    }

    public boolean primeSubOperation(int[] nums) {
        // Initialize the sieve
        sieve(isprime);

        int n = nums.length;

        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                continue;
            }  

            boolean modified = false;
            for (int p = 2; p < nums[i]; p++) {
                if (!isprime[p]) {
                    continue;
                } 

                if (nums[i] - p < nums[i + 1]) {
                    nums[i] -= p;
                    modified = true;
                    break;
                }
            }

            if (!modified || nums[i] >= nums[i + 1]) {
                return false;
            }
        }

        return true;
    }

    
}
